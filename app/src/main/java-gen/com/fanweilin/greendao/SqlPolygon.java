package com.fanweilin.greendao;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.fanweilin.greendao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "SQL_POLYGON".
 */
@Entity(active = true)
public class SqlPolygon {

    @Id(autoincrement = true)
    private Long id;
    private String name;
    private String describe;
    private Double distance;
    private Double area;
    private Integer type;
    private Integer color;
    private Integer width;
    private Integer innercolor;
    private String points;
    private Long polyGonToFileID;
    private Long polyGonToOlFileID;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient SqlPolygonDao myDao;

    @ToOne(joinProperty = "polyGonToFileID")
    private Files files;

    @Generated
    private transient Long files__resolvedKey;

    @ToOne(joinProperty = "polyGonToOlFileID")
    private Olfiles olfiles;

    @Generated
    private transient Long olfiles__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "ptTopolyGonID")
    })
    private List<Sqlpoint> pointGonItems;

    @Generated
    public SqlPolygon() {
    }

    public SqlPolygon(Long id) {
        this.id = id;
    }

    @Generated
    public SqlPolygon(Long id, String name, String describe, Double distance, Double area, Integer type, Integer color, Integer width, Integer innercolor, String points, Long polyGonToFileID, Long polyGonToOlFileID) {
        this.id = id;
        this.name = name;
        this.describe = describe;
        this.distance = distance;
        this.area = area;
        this.type = type;
        this.color = color;
        this.width = width;
        this.innercolor = innercolor;
        this.points = points;
        this.polyGonToFileID = polyGonToFileID;
        this.polyGonToOlFileID = polyGonToOlFileID;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSqlPolygonDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescribe() {
        return describe;
    }

    public void setDescribe(String describe) {
        this.describe = describe;
    }

    public Double getDistance() {
        return distance;
    }

    public void setDistance(Double distance) {
        this.distance = distance;
    }

    public Double getArea() {
        return area;
    }

    public void setArea(Double area) {
        this.area = area;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public Integer getColor() {
        return color;
    }

    public void setColor(Integer color) {
        this.color = color;
    }

    public Integer getWidth() {
        return width;
    }

    public void setWidth(Integer width) {
        this.width = width;
    }

    public Integer getInnercolor() {
        return innercolor;
    }

    public void setInnercolor(Integer innercolor) {
        this.innercolor = innercolor;
    }

    public String getPoints() {
        return points;
    }

    public void setPoints(String points) {
        this.points = points;
    }

    public Long getPolyGonToFileID() {
        return polyGonToFileID;
    }

    public void setPolyGonToFileID(Long polyGonToFileID) {
        this.polyGonToFileID = polyGonToFileID;
    }

    public Long getPolyGonToOlFileID() {
        return polyGonToOlFileID;
    }

    public void setPolyGonToOlFileID(Long polyGonToOlFileID) {
        this.polyGonToOlFileID = polyGonToOlFileID;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Files getFiles() {
        Long __key = this.polyGonToFileID;
        if (files__resolvedKey == null || !files__resolvedKey.equals(__key)) {
            __throwIfDetached();
            FilesDao targetDao = daoSession.getFilesDao();
            Files filesNew = targetDao.load(__key);
            synchronized (this) {
                files = filesNew;
            	files__resolvedKey = __key;
            }
        }
        return files;
    }

    @Generated
    public void setFiles(Files files) {
        synchronized (this) {
            this.files = files;
            polyGonToFileID = files == null ? null : files.getId();
            files__resolvedKey = polyGonToFileID;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Olfiles getOlfiles() {
        Long __key = this.polyGonToOlFileID;
        if (olfiles__resolvedKey == null || !olfiles__resolvedKey.equals(__key)) {
            __throwIfDetached();
            OlfilesDao targetDao = daoSession.getOlfilesDao();
            Olfiles olfilesNew = targetDao.load(__key);
            synchronized (this) {
                olfiles = olfilesNew;
            	olfiles__resolvedKey = __key;
            }
        }
        return olfiles;
    }

    @Generated
    public void setOlfiles(Olfiles olfiles) {
        synchronized (this) {
            this.olfiles = olfiles;
            polyGonToOlFileID = olfiles == null ? null : olfiles.getId();
            olfiles__resolvedKey = polyGonToOlFileID;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Sqlpoint> getPointGonItems() {
        if (pointGonItems == null) {
            __throwIfDetached();
            SqlpointDao targetDao = daoSession.getSqlpointDao();
            List<Sqlpoint> pointGonItemsNew = targetDao._querySqlPolygon_PointGonItems(id);
            synchronized (this) {
                if(pointGonItems == null) {
                    pointGonItems = pointGonItemsNew;
                }
            }
        }
        return pointGonItems;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetPointGonItems() {
        pointGonItems = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
