package com.fanweilin.greendao;

import org.greenrobot.greendao.annotation.*;

import com.fanweilin.greendao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "SQLPOINT".
 */
@Entity(active = true)
public class Sqlpoint {

    @Id(autoincrement = true)
    private Long id;
    private Double latitude;
    private Double longitude;
    private Long ptTopolyGonID;
    private Long ptTopolyID;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient SqlpointDao myDao;

    @ToOne(joinProperty = "ptTopolyGonID")
    private SqlPolygon sqlPolygon;

    @Generated
    private transient Long sqlPolygon__resolvedKey;

    @ToOne(joinProperty = "ptTopolyID")
    private SqlPolyline sqlPolyline;

    @Generated
    private transient Long sqlPolyline__resolvedKey;

    @Generated
    public Sqlpoint() {
    }

    public Sqlpoint(Long id) {
        this.id = id;
    }

    @Generated
    public Sqlpoint(Long id, Double latitude, Double longitude, Long ptTopolyGonID, Long ptTopolyID) {
        this.id = id;
        this.latitude = latitude;
        this.longitude = longitude;
        this.ptTopolyGonID = ptTopolyGonID;
        this.ptTopolyID = ptTopolyID;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSqlpointDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Double getLatitude() {
        return latitude;
    }

    public void setLatitude(Double latitude) {
        this.latitude = latitude;
    }

    public Double getLongitude() {
        return longitude;
    }

    public void setLongitude(Double longitude) {
        this.longitude = longitude;
    }

    public Long getPtTopolyGonID() {
        return ptTopolyGonID;
    }

    public void setPtTopolyGonID(Long ptTopolyGonID) {
        this.ptTopolyGonID = ptTopolyGonID;
    }

    public Long getPtTopolyID() {
        return ptTopolyID;
    }

    public void setPtTopolyID(Long ptTopolyID) {
        this.ptTopolyID = ptTopolyID;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public SqlPolygon getSqlPolygon() {
        Long __key = this.ptTopolyGonID;
        if (sqlPolygon__resolvedKey == null || !sqlPolygon__resolvedKey.equals(__key)) {
            __throwIfDetached();
            SqlPolygonDao targetDao = daoSession.getSqlPolygonDao();
            SqlPolygon sqlPolygonNew = targetDao.load(__key);
            synchronized (this) {
                sqlPolygon = sqlPolygonNew;
            	sqlPolygon__resolvedKey = __key;
            }
        }
        return sqlPolygon;
    }

    @Generated
    public void setSqlPolygon(SqlPolygon sqlPolygon) {
        synchronized (this) {
            this.sqlPolygon = sqlPolygon;
            ptTopolyGonID = sqlPolygon == null ? null : sqlPolygon.getId();
            sqlPolygon__resolvedKey = ptTopolyGonID;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public SqlPolyline getSqlPolyline() {
        Long __key = this.ptTopolyID;
        if (sqlPolyline__resolvedKey == null || !sqlPolyline__resolvedKey.equals(__key)) {
            __throwIfDetached();
            SqlPolylineDao targetDao = daoSession.getSqlPolylineDao();
            SqlPolyline sqlPolylineNew = targetDao.load(__key);
            synchronized (this) {
                sqlPolyline = sqlPolylineNew;
            	sqlPolyline__resolvedKey = __key;
            }
        }
        return sqlPolyline;
    }

    @Generated
    public void setSqlPolyline(SqlPolyline sqlPolyline) {
        synchronized (this) {
            this.sqlPolyline = sqlPolyline;
            ptTopolyID = sqlPolyline == null ? null : sqlPolyline.getId();
            sqlPolyline__resolvedKey = ptTopolyID;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
