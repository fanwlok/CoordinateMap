package com.fanweilin.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SQLPOINT".
*/
public class SqlpointDao extends AbstractDao<Sqlpoint, Long> {

    public static final String TABLENAME = "SQLPOINT";

    /**
     * Properties of entity Sqlpoint.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Latitude = new Property(1, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(2, Double.class, "longitude", false, "LONGITUDE");
        public final static Property PtTopolyGonID = new Property(3, Long.class, "ptTopolyGonID", false, "PT_TOPOLY_GON_ID");
        public final static Property PtTopolyID = new Property(4, Long.class, "ptTopolyID", false, "PT_TOPOLY_ID");
    }

    private DaoSession daoSession;

    private Query<Sqlpoint> sqlPolygon_PointGonItemsQuery;
    private Query<Sqlpoint> sqlPolyline_PointpolyItemsQuery;

    public SqlpointDao(DaoConfig config) {
        super(config);
    }
    
    public SqlpointDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SQLPOINT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LATITUDE\" REAL," + // 1: latitude
                "\"LONGITUDE\" REAL," + // 2: longitude
                "\"PT_TOPOLY_GON_ID\" INTEGER," + // 3: ptTopolyGonID
                "\"PT_TOPOLY_ID\" INTEGER);"); // 4: ptTopolyID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SQLPOINT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Sqlpoint entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(2, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(3, longitude);
        }
 
        Long ptTopolyGonID = entity.getPtTopolyGonID();
        if (ptTopolyGonID != null) {
            stmt.bindLong(4, ptTopolyGonID);
        }
 
        Long ptTopolyID = entity.getPtTopolyID();
        if (ptTopolyID != null) {
            stmt.bindLong(5, ptTopolyID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Sqlpoint entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(2, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(3, longitude);
        }
 
        Long ptTopolyGonID = entity.getPtTopolyGonID();
        if (ptTopolyGonID != null) {
            stmt.bindLong(4, ptTopolyGonID);
        }
 
        Long ptTopolyID = entity.getPtTopolyID();
        if (ptTopolyID != null) {
            stmt.bindLong(5, ptTopolyID);
        }
    }

    @Override
    protected final void attachEntity(Sqlpoint entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Sqlpoint readEntity(Cursor cursor, int offset) {
        Sqlpoint entity = new Sqlpoint( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // latitude
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // longitude
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // ptTopolyGonID
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // ptTopolyID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Sqlpoint entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLatitude(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setLongitude(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setPtTopolyGonID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setPtTopolyID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Sqlpoint entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Sqlpoint entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Sqlpoint entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "pointGonItems" to-many relationship of SqlPolygon. */
    public List<Sqlpoint> _querySqlPolygon_PointGonItems(Long ptTopolyGonID) {
        synchronized (this) {
            if (sqlPolygon_PointGonItemsQuery == null) {
                QueryBuilder<Sqlpoint> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PtTopolyGonID.eq(null));
                sqlPolygon_PointGonItemsQuery = queryBuilder.build();
            }
        }
        Query<Sqlpoint> query = sqlPolygon_PointGonItemsQuery.forCurrentThread();
        query.setParameter(0, ptTopolyGonID);
        return query.list();
    }

    /** Internal query to resolve the "pointpolyItems" to-many relationship of SqlPolyline. */
    public List<Sqlpoint> _querySqlPolyline_PointpolyItems(Long ptTopolyID) {
        synchronized (this) {
            if (sqlPolyline_PointpolyItemsQuery == null) {
                QueryBuilder<Sqlpoint> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PtTopolyID.eq(null));
                sqlPolyline_PointpolyItemsQuery = queryBuilder.build();
            }
        }
        Query<Sqlpoint> query = sqlPolyline_PointpolyItemsQuery.forCurrentThread();
        query.setParameter(0, ptTopolyID);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSqlPolygonDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getSqlPolylineDao().getAllColumns());
            builder.append(" FROM SQLPOINT T");
            builder.append(" LEFT JOIN SQL_POLYGON T0 ON T.\"PT_TOPOLY_GON_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN SQL_POLYLINE T1 ON T.\"PT_TOPOLY_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Sqlpoint loadCurrentDeep(Cursor cursor, boolean lock) {
        Sqlpoint entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        SqlPolygon sqlPolygon = loadCurrentOther(daoSession.getSqlPolygonDao(), cursor, offset);
        entity.setSqlPolygon(sqlPolygon);
        offset += daoSession.getSqlPolygonDao().getAllColumns().length;

        SqlPolyline sqlPolyline = loadCurrentOther(daoSession.getSqlPolylineDao(), cursor, offset);
        entity.setSqlPolyline(sqlPolyline);

        return entity;    
    }

    public Sqlpoint loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Sqlpoint> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Sqlpoint> list = new ArrayList<Sqlpoint>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Sqlpoint> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Sqlpoint> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
