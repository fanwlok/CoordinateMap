package com.fanweilin.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SQL_POLYLINE".
*/
public class SqlPolylineDao extends AbstractDao<SqlPolyline, Long> {

    public static final String TABLENAME = "SQL_POLYLINE";

    /**
     * Properties of entity SqlPolyline.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Describe = new Property(2, String.class, "describe", false, "DESCRIBE");
        public final static Property Distance = new Property(3, Double.class, "distance", false, "DISTANCE");
        public final static Property Type = new Property(4, Integer.class, "type", false, "TYPE");
        public final static Property Color = new Property(5, Integer.class, "color", false, "COLOR");
        public final static Property Width = new Property(6, Integer.class, "width", false, "WIDTH");
        public final static Property Points = new Property(7, String.class, "points", false, "POINTS");
        public final static Property PolyToFileID = new Property(8, Long.class, "polyToFileID", false, "POLY_TO_FILE_ID");
        public final static Property PolyToOlFileID = new Property(9, Long.class, "polyToOlFileID", false, "POLY_TO_OL_FILE_ID");
    }

    private DaoSession daoSession;

    private Query<SqlPolyline> files_PolyItemsQuery;
    private Query<SqlPolyline> olfiles_PolyOlItemsQuery;

    public SqlPolylineDao(DaoConfig config) {
        super(config);
    }
    
    public SqlPolylineDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SQL_POLYLINE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"DESCRIBE\" TEXT," + // 2: describe
                "\"DISTANCE\" REAL," + // 3: distance
                "\"TYPE\" INTEGER," + // 4: type
                "\"COLOR\" INTEGER," + // 5: color
                "\"WIDTH\" INTEGER," + // 6: width
                "\"POINTS\" TEXT," + // 7: points
                "\"POLY_TO_FILE_ID\" INTEGER," + // 8: polyToFileID
                "\"POLY_TO_OL_FILE_ID\" INTEGER);"); // 9: polyToOlFileID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SQL_POLYLINE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SqlPolyline entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(3, describe);
        }
 
        Double distance = entity.getDistance();
        if (distance != null) {
            stmt.bindDouble(4, distance);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(5, type);
        }
 
        Integer color = entity.getColor();
        if (color != null) {
            stmt.bindLong(6, color);
        }
 
        Integer width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(7, width);
        }
 
        String points = entity.getPoints();
        if (points != null) {
            stmt.bindString(8, points);
        }
 
        Long polyToFileID = entity.getPolyToFileID();
        if (polyToFileID != null) {
            stmt.bindLong(9, polyToFileID);
        }
 
        Long polyToOlFileID = entity.getPolyToOlFileID();
        if (polyToOlFileID != null) {
            stmt.bindLong(10, polyToOlFileID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SqlPolyline entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(3, describe);
        }
 
        Double distance = entity.getDistance();
        if (distance != null) {
            stmt.bindDouble(4, distance);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(5, type);
        }
 
        Integer color = entity.getColor();
        if (color != null) {
            stmt.bindLong(6, color);
        }
 
        Integer width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(7, width);
        }
 
        String points = entity.getPoints();
        if (points != null) {
            stmt.bindString(8, points);
        }
 
        Long polyToFileID = entity.getPolyToFileID();
        if (polyToFileID != null) {
            stmt.bindLong(9, polyToFileID);
        }
 
        Long polyToOlFileID = entity.getPolyToOlFileID();
        if (polyToOlFileID != null) {
            stmt.bindLong(10, polyToOlFileID);
        }
    }

    @Override
    protected final void attachEntity(SqlPolyline entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SqlPolyline readEntity(Cursor cursor, int offset) {
        SqlPolyline entity = new SqlPolyline( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // describe
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // distance
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // color
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // width
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // points
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // polyToFileID
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // polyToOlFileID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SqlPolyline entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescribe(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDistance(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setColor(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setWidth(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPoints(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPolyToFileID(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setPolyToOlFileID(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SqlPolyline entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SqlPolyline entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SqlPolyline entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "polyItems" to-many relationship of Files. */
    public List<SqlPolyline> _queryFiles_PolyItems(Long polyToFileID) {
        synchronized (this) {
            if (files_PolyItemsQuery == null) {
                QueryBuilder<SqlPolyline> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PolyToFileID.eq(null));
                files_PolyItemsQuery = queryBuilder.build();
            }
        }
        Query<SqlPolyline> query = files_PolyItemsQuery.forCurrentThread();
        query.setParameter(0, polyToFileID);
        return query.list();
    }

    /** Internal query to resolve the "polyOlItems" to-many relationship of Olfiles. */
    public List<SqlPolyline> _queryOlfiles_PolyOlItems(Long polyToOlFileID) {
        synchronized (this) {
            if (olfiles_PolyOlItemsQuery == null) {
                QueryBuilder<SqlPolyline> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PolyToOlFileID.eq(null));
                olfiles_PolyOlItemsQuery = queryBuilder.build();
            }
        }
        Query<SqlPolyline> query = olfiles_PolyOlItemsQuery.forCurrentThread();
        query.setParameter(0, polyToOlFileID);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getFilesDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getOlfilesDao().getAllColumns());
            builder.append(" FROM SQL_POLYLINE T");
            builder.append(" LEFT JOIN FILES T0 ON T.\"POLY_TO_FILE_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN OLFILES T1 ON T.\"POLY_TO_OL_FILE_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected SqlPolyline loadCurrentDeep(Cursor cursor, boolean lock) {
        SqlPolyline entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Files files = loadCurrentOther(daoSession.getFilesDao(), cursor, offset);
        entity.setFiles(files);
        offset += daoSession.getFilesDao().getAllColumns().length;

        Olfiles olfiles = loadCurrentOther(daoSession.getOlfilesDao(), cursor, offset);
        entity.setOlfiles(olfiles);

        return entity;    
    }

    public SqlPolyline loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<SqlPolyline> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<SqlPolyline> list = new ArrayList<SqlPolyline>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<SqlPolyline> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<SqlPolyline> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
