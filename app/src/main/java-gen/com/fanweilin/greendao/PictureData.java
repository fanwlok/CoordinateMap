package com.fanweilin.greendao;

import org.greenrobot.greendao.annotation.*;

import com.fanweilin.greendao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "PICTURE_DATA".
 */
@Entity(active = true)
public class PictureData implements java.io.Serializable {

    @Id(autoincrement = true)
    private Long id;
    private String path;
    private Long pointId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient PictureDataDao myDao;

    @ToOne(joinProperty = "pointId")
    private PointData pointData;

    @Generated
    private transient Long pointData__resolvedKey;

    @Generated
    public PictureData() {
    }

    public PictureData(Long id) {
        this.id = id;
    }

    @Generated
    public PictureData(Long id, String path, Long pointId) {
        this.id = id;
        this.path = path;
        this.pointId = pointId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPictureDataDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }

    public Long getPointId() {
        return pointId;
    }

    public void setPointId(Long pointId) {
        this.pointId = pointId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public PointData getPointData() {
        Long __key = this.pointId;
        if (pointData__resolvedKey == null || !pointData__resolvedKey.equals(__key)) {
            __throwIfDetached();
            PointDataDao targetDao = daoSession.getPointDataDao();
            PointData pointDataNew = targetDao.load(__key);
            synchronized (this) {
                pointData = pointDataNew;
            	pointData__resolvedKey = __key;
            }
        }
        return pointData;
    }

    @Generated
    public void setPointData(PointData pointData) {
        synchronized (this) {
            this.pointData = pointData;
            pointId = pointData == null ? null : pointData.getId();
            pointData__resolvedKey = pointId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
