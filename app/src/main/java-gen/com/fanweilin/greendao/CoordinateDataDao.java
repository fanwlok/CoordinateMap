package com.fanweilin.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COORDINATE_DATA".
*/
public class CoordinateDataDao extends AbstractDao<CoordinateData, Long> {

    public static final String TABLENAME = "COORDINATE_DATA";

    /**
     * Properties of entity CoordinateData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Midlat = new Property(2, Double.class, "midlat", false, "MIDLAT");
        public final static Property Lat = new Property(3, Double.class, "lat", false, "LAT");
        public final static Property Lon = new Property(4, Double.class, "lon", false, "LON");
        public final static Property X = new Property(5, Double.class, "x", false, "X");
        public final static Property Y = new Property(6, Double.class, "y", false, "Y");
        public final static Property Difx = new Property(7, Double.class, "difx", false, "DIFX");
        public final static Property Dify = new Property(8, Double.class, "dify", false, "DIFY");
    }


    public CoordinateDataDao(DaoConfig config) {
        super(config);
    }
    
    public CoordinateDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COORDINATE_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"MIDLAT\" REAL," + // 2: midlat
                "\"LAT\" REAL," + // 3: lat
                "\"LON\" REAL," + // 4: lon
                "\"X\" REAL," + // 5: x
                "\"Y\" REAL," + // 6: y
                "\"DIFX\" REAL," + // 7: difx
                "\"DIFY\" REAL);"); // 8: dify
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COORDINATE_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CoordinateData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Double midlat = entity.getMidlat();
        if (midlat != null) {
            stmt.bindDouble(3, midlat);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(4, lat);
        }
 
        Double lon = entity.getLon();
        if (lon != null) {
            stmt.bindDouble(5, lon);
        }
 
        Double x = entity.getX();
        if (x != null) {
            stmt.bindDouble(6, x);
        }
 
        Double y = entity.getY();
        if (y != null) {
            stmt.bindDouble(7, y);
        }
 
        Double difx = entity.getDifx();
        if (difx != null) {
            stmt.bindDouble(8, difx);
        }
 
        Double dify = entity.getDify();
        if (dify != null) {
            stmt.bindDouble(9, dify);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CoordinateData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Double midlat = entity.getMidlat();
        if (midlat != null) {
            stmt.bindDouble(3, midlat);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(4, lat);
        }
 
        Double lon = entity.getLon();
        if (lon != null) {
            stmt.bindDouble(5, lon);
        }
 
        Double x = entity.getX();
        if (x != null) {
            stmt.bindDouble(6, x);
        }
 
        Double y = entity.getY();
        if (y != null) {
            stmt.bindDouble(7, y);
        }
 
        Double difx = entity.getDifx();
        if (difx != null) {
            stmt.bindDouble(8, difx);
        }
 
        Double dify = entity.getDify();
        if (dify != null) {
            stmt.bindDouble(9, dify);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CoordinateData readEntity(Cursor cursor, int offset) {
        CoordinateData entity = new CoordinateData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // midlat
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // lat
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // lon
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // x
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // y
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // difx
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8) // dify
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CoordinateData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMidlat(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setLat(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setLon(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setX(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setY(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setDifx(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setDify(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CoordinateData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CoordinateData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CoordinateData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
