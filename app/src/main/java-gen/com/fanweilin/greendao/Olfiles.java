package com.fanweilin.greendao;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.fanweilin.greendao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "OLFILES".
 */
@Entity(active = true)
public class Olfiles {

    @Id(autoincrement = true)
    private Long id;

    @NotNull
    private String title;
    private String mapname;
    private Integer num;
    private String date;
    private java.util.Date anchor;
    private Integer markerid;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient OlfilesDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "olfileId")
    })
    private List<PointData> pointolItems;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "polyToOlFileID")
    })
    private List<SqlPolyline> polyOlItems;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "polyGonToOlFileID")
    })
    private List<SqlPolygon> polygonOlItems;

    @Generated
    public Olfiles() {
    }

    public Olfiles(Long id) {
        this.id = id;
    }

    @Generated
    public Olfiles(Long id, String title, String mapname, Integer num, String date, java.util.Date anchor, Integer markerid) {
        this.id = id;
        this.title = title;
        this.mapname = mapname;
        this.num = num;
        this.date = date;
        this.anchor = anchor;
        this.markerid = markerid;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOlfilesDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(@NotNull String title) {
        this.title = title;
    }

    public String getMapname() {
        return mapname;
    }

    public void setMapname(String mapname) {
        this.mapname = mapname;
    }

    public Integer getNum() {
        return num;
    }

    public void setNum(Integer num) {
        this.num = num;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public java.util.Date getAnchor() {
        return anchor;
    }

    public void setAnchor(java.util.Date anchor) {
        this.anchor = anchor;
    }

    public Integer getMarkerid() {
        return markerid;
    }

    public void setMarkerid(Integer markerid) {
        this.markerid = markerid;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<PointData> getPointolItems() {
        if (pointolItems == null) {
            __throwIfDetached();
            PointDataDao targetDao = daoSession.getPointDataDao();
            List<PointData> pointolItemsNew = targetDao._queryOlfiles_PointolItems(id);
            synchronized (this) {
                if(pointolItems == null) {
                    pointolItems = pointolItemsNew;
                }
            }
        }
        return pointolItems;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetPointolItems() {
        pointolItems = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<SqlPolyline> getPolyOlItems() {
        if (polyOlItems == null) {
            __throwIfDetached();
            SqlPolylineDao targetDao = daoSession.getSqlPolylineDao();
            List<SqlPolyline> polyOlItemsNew = targetDao._queryOlfiles_PolyOlItems(id);
            synchronized (this) {
                if(polyOlItems == null) {
                    polyOlItems = polyOlItemsNew;
                }
            }
        }
        return polyOlItems;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetPolyOlItems() {
        polyOlItems = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<SqlPolygon> getPolygonOlItems() {
        if (polygonOlItems == null) {
            __throwIfDetached();
            SqlPolygonDao targetDao = daoSession.getSqlPolygonDao();
            List<SqlPolygon> polygonOlItemsNew = targetDao._queryOlfiles_PolygonOlItems(id);
            synchronized (this) {
                if(polygonOlItems == null) {
                    polygonOlItems = polygonOlItemsNew;
                }
            }
        }
        return polygonOlItems;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetPolygonOlItems() {
        polygonOlItems = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
