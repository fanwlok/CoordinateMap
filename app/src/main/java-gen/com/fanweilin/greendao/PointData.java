package com.fanweilin.greendao;

import java.util.List;
import com.fanweilin.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table POINT_DATA.
 */
public class PointData {

    private Long id;
    private String name;
    private String describe;
    private String address;
    private String wgslatitude;
    private String wgslongitude;
    private String baidulatitude;
    private String baidulongitude;
    private String altitude;
    private String latitude;
    private String longitude;
    private Long fileId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PointDataDao myDao;

    private Files files;
    private Long files__resolvedKey;

    private List<PictureData> pictureItems;

    public PointData() {
    }

    public PointData(Long id) {
        this.id = id;
    }

    public PointData(Long id, String name, String describe, String address, String wgslatitude, String wgslongitude, String baidulatitude, String baidulongitude, String altitude, String latitude, String longitude, Long fileId) {
        this.id = id;
        this.name = name;
        this.describe = describe;
        this.address = address;
        this.wgslatitude = wgslatitude;
        this.wgslongitude = wgslongitude;
        this.baidulatitude = baidulatitude;
        this.baidulongitude = baidulongitude;
        this.altitude = altitude;
        this.latitude = latitude;
        this.longitude = longitude;
        this.fileId = fileId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPointDataDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescribe() {
        return describe;
    }

    public void setDescribe(String describe) {
        this.describe = describe;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getWgslatitude() {
        return wgslatitude;
    }

    public void setWgslatitude(String wgslatitude) {
        this.wgslatitude = wgslatitude;
    }

    public String getWgslongitude() {
        return wgslongitude;
    }

    public void setWgslongitude(String wgslongitude) {
        this.wgslongitude = wgslongitude;
    }

    public String getBaidulatitude() {
        return baidulatitude;
    }

    public void setBaidulatitude(String baidulatitude) {
        this.baidulatitude = baidulatitude;
    }

    public String getBaidulongitude() {
        return baidulongitude;
    }

    public void setBaidulongitude(String baidulongitude) {
        this.baidulongitude = baidulongitude;
    }

    public String getAltitude() {
        return altitude;
    }

    public void setAltitude(String altitude) {
        this.altitude = altitude;
    }

    public String getLatitude() {
        return latitude;
    }

    public void setLatitude(String latitude) {
        this.latitude = latitude;
    }

    public String getLongitude() {
        return longitude;
    }

    public void setLongitude(String longitude) {
        this.longitude = longitude;
    }

    public Long getFileId() {
        return fileId;
    }

    public void setFileId(Long fileId) {
        this.fileId = fileId;
    }

    /** To-one relationship, resolved on first access. */
    public Files getFiles() {
        Long __key = this.fileId;
        if (files__resolvedKey == null || !files__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FilesDao targetDao = daoSession.getFilesDao();
            Files filesNew = targetDao.load(__key);
            synchronized (this) {
                files = filesNew;
            	files__resolvedKey = __key;
            }
        }
        return files;
    }

    public void setFiles(Files files) {
        synchronized (this) {
            this.files = files;
            fileId = files == null ? null : files.getId();
            files__resolvedKey = fileId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PictureData> getPictureItems() {
        if (pictureItems == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PictureDataDao targetDao = daoSession.getPictureDataDao();
            List<PictureData> pictureItemsNew = targetDao._queryPointData_PictureItems(id);
            synchronized (this) {
                if(pictureItems == null) {
                    pictureItems = pictureItemsNew;
                }
            }
        }
        return pictureItems;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPictureItems() {
        pictureItems = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
