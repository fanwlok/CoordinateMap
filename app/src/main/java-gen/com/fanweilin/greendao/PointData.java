package com.fanweilin.greendao;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.fanweilin.greendao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "POINT_DATA".
 */
@Entity(active = true)
public class PointData {

    @Id
    private Long id;
    private String name;
    private String describe;
    private String address;
    private String wgslatitude;
    private String wgslongitude;
    private String baidulatitude;
    private String baidulongitude;
    private String altitude;
    private String latitude;
    private String longitude;
    private String filename;
    private Integer status;
    private Long guid;
    private Long fileid;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient PointDataDao myDao;

    @ToOne(joinProperty = "fileid")
    private Files files;

    @Generated
    private transient Long files__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "pointId")
    })
    private List<PictureData> pictureItems;

    @Generated
    public PointData() {
    }

    public PointData(Long id) {
        this.id = id;
    }

    @Generated
    public PointData(Long id, String name, String describe, String address, String wgslatitude, String wgslongitude, String baidulatitude, String baidulongitude, String altitude, String latitude, String longitude, String filename, Integer status, Long guid, Long fileid) {
        this.id = id;
        this.name = name;
        this.describe = describe;
        this.address = address;
        this.wgslatitude = wgslatitude;
        this.wgslongitude = wgslongitude;
        this.baidulatitude = baidulatitude;
        this.baidulongitude = baidulongitude;
        this.altitude = altitude;
        this.latitude = latitude;
        this.longitude = longitude;
        this.filename = filename;
        this.status = status;
        this.guid = guid;
        this.fileid = fileid;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPointDataDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescribe() {
        return describe;
    }

    public void setDescribe(String describe) {
        this.describe = describe;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getWgslatitude() {
        return wgslatitude;
    }

    public void setWgslatitude(String wgslatitude) {
        this.wgslatitude = wgslatitude;
    }

    public String getWgslongitude() {
        return wgslongitude;
    }

    public void setWgslongitude(String wgslongitude) {
        this.wgslongitude = wgslongitude;
    }

    public String getBaidulatitude() {
        return baidulatitude;
    }

    public void setBaidulatitude(String baidulatitude) {
        this.baidulatitude = baidulatitude;
    }

    public String getBaidulongitude() {
        return baidulongitude;
    }

    public void setBaidulongitude(String baidulongitude) {
        this.baidulongitude = baidulongitude;
    }

    public String getAltitude() {
        return altitude;
    }

    public void setAltitude(String altitude) {
        this.altitude = altitude;
    }

    public String getLatitude() {
        return latitude;
    }

    public void setLatitude(String latitude) {
        this.latitude = latitude;
    }

    public String getLongitude() {
        return longitude;
    }

    public void setLongitude(String longitude) {
        this.longitude = longitude;
    }

    public String getFilename() {
        return filename;
    }

    public void setFilename(String filename) {
        this.filename = filename;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public Long getGuid() {
        return guid;
    }

    public void setGuid(Long guid) {
        this.guid = guid;
    }

    public Long getFileid() {
        return fileid;
    }

    public void setFileid(Long fileid) {
        this.fileid = fileid;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Files getFiles() {
        Long __key = this.fileid;
        if (files__resolvedKey == null || !files__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FilesDao targetDao = daoSession.getFilesDao();
            Files filesNew = targetDao.load(__key);
            synchronized (this) {
                files = filesNew;
            	files__resolvedKey = __key;
            }
        }
        return files;
    }

    @Generated
    public void setFiles(Files files) {
        synchronized (this) {
            this.files = files;
            fileid = files == null ? null : files.getId();
            files__resolvedKey = fileid;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<PictureData> getPictureItems() {
        if (pictureItems == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PictureDataDao targetDao = daoSession.getPictureDataDao();
            List<PictureData> pictureItemsNew = targetDao._queryPointData_PictureItems(id);
            synchronized (this) {
                if(pictureItems == null) {
                    pictureItems = pictureItemsNew;
                }
            }
        }
        return pictureItems;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetPictureItems() {
        pictureItems = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
